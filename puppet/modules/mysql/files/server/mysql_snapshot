#!/bin/bash -vx

export PATH=/bin:/usr/bin:/sbin:/usr/sbin
logger="logger -ist ${0##*/}"
snaplv_suffix="snap"

# Collect arguments
data_dir="$1"
snap_dir="$2"

# Utility function to abort snapshot procedure and alert root
function abort() {
  $logger -p user.err -- "$1"
  mail -s "${0##*/} error" root <<< "${0##*/}: $1"
  # Exit with zero status to allow TSM backup to proceed anyway
  exit 0
}

# Abort if we were invoked incorrectly
[ -n "$data_dir" -a -n "$snap_dir" ] || abort "incorrect usage"

# Find logical volumes for our active and snapshot mountpoints
unset data_lv data_fstype snap_lv
while read device mount fstype garbage; do
  if [ "$mount" = "$data_dir" ]; then
    data_lv=$(lvdisplay -c $device | awk -F: '{gsub("^ *",""); print $1}')
    data_fstype=$fstype
    $logger "found device $device, LV $data_lv for data directory $data_dir"
  fi
  if [ "$mount" = "$snap_dir" ]; then
    snap_lv=$(lvdisplay -c $device | awk -F: '{gsub("^ *",""); print $1}')
    $logger "found device $device, LV $snap_lv for snapshot directory $snap_dir"
  fi
done < /proc/mounts

# Abort if we didn't find a device for mountpoint $data_dir
[ -n "$data_lv" ] || abort "no device found for $data_dir"

# If our last snapshot is still mounted (as is likely when we are
# run as a preschedulecmd), unmount it and destroy the snapshot
if [ -n "$snap_lv" ]; then
  umount -f "$snap_dir" &>/dev/null || abort "umount -f $snap_dir returned $?"
  lvremove -f "$snap_lv" &>/dev/null || abort "lvremove -f $snap_lv returned $?"
fi

# Add a suffix to the data LV name to form our new snapshot LV name
snap_lv="$data_lv$snaplv_suffix"
snap_lv_name="${snap_lv##*/}"

# Freeze MySQL database just long enough to snapshot the logical volume. Note
# that HOME must be set in order to find ~/.my.cnf, since TSM sanitizes the
# environment for preschedulecmds.
output=$(HOME=/root mysql 2>&1 <<EOF
flush tables with read lock;
flush logs;
system lvcreate --snapshot --size=1G --name=$snap_lv_name $data_lv 3>&- 4>&- 5>&-;
unlock tables;
EOF
) || abort "mysql batch script returned $?, output: $output"

# Mount the new snapshot; -o ro is safe as the kernel will allow write
# access just long enough to replay the filesystem's journal
mount -t $data_fstype -o ro $snap_lv $snap_dir \
  || abort "mount -t $data_fstype -o ro $snap_lv $snap_dir returned $?"

# Report success and exit
$logger "success"
exit 0

=head1 NAME

mysql_snapshot - quiesce and snapshot MySQL logical volume

=head1 SYNOPSIS

B</usr/local/libexec/mysql_snapshot /var/lib/mysql /var/lib/mysql.snapshot>

=head1 DESCRIPTION

B<mysql_snapshot> produces a consistent snapshot of MySQL data on the local
machine for backup purposes. It does this by quiescing MySQL databases just
long enough to snapshot the logical volume holding mysqld's data directory,
then mounting this snapshot volume elsewhere.

The first argument to B<mysql_snapshot> should be the MySQL data directory;
the second argument should be the mountpoint for the snapshot volume.

B<mysql_snapshot> is intended to be run as a preschedulecmd by the Tivoli
Storage Manager's client scheduler, so that TSM backs up a database snapshot
taken as close as possible in time to the scheduled backup event. When
B<mysql_snapshot> is installed as a preschedulecmd, the TSM client should
probably be configured not to backup the filesystem on which live MySQL data
resides, as this would result in the data being backed up twice.

=head1 CAVEATS

This tool must be able to connect to the local machine's MySQL daemon and run
privileged commands (specifically C<flush tables with read lock>) without user
intervention. Usually this will involve storing a password in the root user's
F<~/.my.cnf> file.

=head1 DIAGNOSTICS

If a preschedulecmd exits with nonzero status, the TSM scheduler will abort
the current system backup. Since B<mysql_snapshot> is intended to run as a
preschedulecmd, and since other filesystems should probably be backed up even
if MySQL data cannot be quiesced, the program always exits with status 0.

Diagnostic output is sent to L<syslogd(8)>, however, to aid with debugging,
and if the snapshot-and-mount procedure fails, mail is sent to root to alert
the administrator.

=head1 SEE ALSO

L<mysql(1)>, L<lvcreate(8)>, L<lvm(8)>

Tivoli Storage Manager documentation
(L<http://publib.boulder.ibm.com/infocenter/tivihelp/index.jsp>)

=head1 AUTHOR

Ian Ward Comfort <icomfort@stanford.edu>
